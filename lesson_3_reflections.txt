When would you want to use a remote repository rather than keeping all your work
local?

    When I want to share my changes with other people and when I want to bring
    other people's changes into my own projects.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    To avoid my local uncommitted changes from being overwritten by the changes
    in the remote repository.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Forking is only used in the context of GitHub, taking an existing GitHub
    repository and making a copy of it. No clone into the local repository
    is required.
    Branches happen on a single repository.
    Cloning involves taking an existing repository and making one just like it.
    The original repository could either be remote or local.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    A local copy will contain the state of the remote branch as of the last 
    time I pushed or pulled the branch.
    If I'm going to be offline for a while, I can update my local copy of the
    remote branch using git fetch. Then I'll have access to any updates that
    have been made since I last synced up. Using git log and git diff I
    can see what changes were introduced.    

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    I would exchange the original file with the collaborators. If it is a
    Word document I would mark my changes using the track changes mode.
    The start is easier, as there is no need to set up a git repository or
    GitHub account respectively. There is not need to learn about git and
    learn its commands.
    However, it would be harder to work on the same file in parallel. It would
    be harder to merge different versions of the same file. It would be 
    harder to track the current state of the file as well as the change
    history. 
        

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    I would want to make changes in a separate branch if I want to work with
    other deverlopers on a particular feature without affecting the main code
    base. Separate branches help keeping the master branch free of errors.
    Pull requests that are used to merge separate branches into the master
    branch provide a good opportunity for code reviews and discussions
    and thus to intensify the cooperation.
    The benefit of making changes directly in the master branch is the
    workflow being easier. For a person working alone on a project
    making changes directly on the master branch will do.

