What happens when you initialize a repository? Why do you need to do it?
	
	git creates a .git file and henceforth tracks all changes in the directory.
	In the beginning there are no commits yet. The first is done by the user.
	Without initializing the repository it would not be under version control.


How is the staging area different from the working directory and the repository?
What value do you think it offers?

	Unlike the working directory the staging area holds completed parts of work
	that are ready for the repository. Unlike the repository the items in the
	staging area have not been comitted yet. The staging area helps me
	collecting items that are part of a logical unit of work so that I can
	commit them together.

How can you use the staging area to make sure you have one commit per logical
change?

	I add all changes/files that belong to the same logical change to the
	staging area. When I'm done I perform a commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	I could use branches for experimental stuff or for some variant of my
	application (e.g. difficulty level, language). Branches help in keeping
	the original version unaffected.

How do the diagrams help you visualize the branch structure?

	I can tell at what point a feature branch was created, on which commit the
	tip of the branch actually is, how to reach a certain commit.
	Commit doesn't care anything about branch names. Only the branches themselves
	store anything about the position of the branches.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	The result of merging two branches is a new commit containing the contents of
	both branches. We represent it as having two ancestors because we can reach
	all the commits of the underlying branches from the merge commit. The
	commits are ordered by timestamp. git diff shows the changes between the
	current and previous version (this is not necessarily the parent!).
	git show shows the changes between the current
	and the parent commit.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

	Automatic merging is a good way of bringing non-conflicting changes into
	a common version. It saves time and can be safer in terms of changes
	will not be overseen. A con is that even changes that my be considered
	as non-conflicting by git, may have logical side effects. Automated
	test are strongly recommended when automatic merging is used.